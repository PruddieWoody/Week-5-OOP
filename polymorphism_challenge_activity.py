# -*- coding: utf-8 -*-
"""Polymorphism Challenge Activity

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mfooztIvbPU_4rgtgf4LEDli4OesTPoS
"""

class Animal:
    """
    Base class representing an animal.
    """
    def __init__(self, name):
        """
        Constructor for the Animal class.

        Args:
            name (str): The name of the animal.
        """
        self.name = name

    def move(self):
        """
        Abstract method to define how the animal moves.  This method is meant to be overridden by subclasses.
        """
        raise NotImplementedError("Subclasses must implement the move() method.")

    def __str__(self):
        """
        Returns a string representation of the animal.
        """
        return f"{self.__class__.__name__}(name='{self.name}')"



class Dog(Animal):
    """
    Represents a dog, inheriting from the Animal class.
    """
    def __init__(self, name, breed):
        """
        Constructor for the Dog class.

        Args:
            name (str): The name of the dog.
            breed (str): The breed of the dog.
        """
        super().__init__(name)
        self.breed = breed

    def move(self):
        """
        Overrides the move() method to define how a dog moves.
        """
        return "Running on four legs"

    def __str__(self):
        """
        Returns a string representation of the dog.
        """
        return f"{super().__str__()}, Breed: {self.breed}"



class Bird(Animal):
    """
    Represents a bird, inheriting from the Animal class.
    """
    def __init__(self, name, species, can_fly=True):
        """
        Constructor for the Bird class.

        Args:
            name (str): The name of the bird.
            species (str): The species of the bird.
            can_fly (bool, optional): Indicates whether the bird can fly. Defaults to True.
        """
        super().__init__(name)
        self.species = species
        self.can_fly = can_fly

    def move(self):
        """
        Overrides the move() method to define how a bird moves.
        """
        if self.can_fly:
            return "Flying through the air"
        else:
            return "Walking on the ground"

    def __str__(self):
        """
        Returns a string representation of the bird.
        """
        return f"{super().__str__()}, Species: {self.species}, Can Fly: {self.can_fly}"



class Fish(Animal):
    """
    Represents a fish, inheriting from the Animal class.
    """
    def __init__(self, name, fin_type):
        """
        Constructor for the Fish class.

        Args:
            name (str): Name of the fish
            fin_type (str): Type of fin.
        """
        super().__init__(name)
        self.fin_type = fin_type

    def move(self):
        """
        Overrides the move() method to define how a fish moves
        """
        return "Swimming in the water"

    def __str__(self):
        return f"{super().__str__()}, Fin Type: {self.fin_type}"
def main():
    """
    Main function to demonstrate polymorphism with Animal objects.
    """
    # Create a list of Animal objects (Dog, Bird, and Fish)
    animals = [
        Dog("Buddy", "Golden Retriever"),
        Bird("Tweety", "Canary"),
        Bird("Penguin", "Emperor Penguin", can_fly=False),
        Fish("Nemo", "Dorsal")
    ]

    # Iterate through the list and call the move() method on each object
    for animal in animals:
        print(f"{animal} moves by: {animal.move()}")  # Polymorphism in action

if __name__ == "__main__":
    main()