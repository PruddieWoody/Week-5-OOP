# -*- coding: utf-8 -*-
"""Design Your Own Class Assignment

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ylUSzdd2AOcoBDEi2XS5PCeisd9Ev69I
"""

class Book:
    """
    Represents a book with title, author, publisher, and price.
    """
    def __init__(self, title, author, publisher, price):
        """
        Constructor to initialize a Book object.

        Args:
            title (str): The title of the book.
            author (str): The author of the book.
            publisher (str): The publisher of the book.
            price (float): The price of the book.
        """
        # Input validation
        if not isinstance(title, str) or not title:
            raise ValueError("Title must be a non-empty string.")
        if not isinstance(author, str) or not author:
            raise ValueError("Author must be a non-empty string.")
        if not isinstance(publisher, str) or not publisher:
            raise ValueError("Publisher must be a non-empty string.")
        if not isinstance(price, (int, float)) or price < 0:
            raise ValueError("Price must be a non-negative number.")

        self.title = title
        self.author = author
        self.publisher = publisher
        self.price = price

    def get_title(self):
        """Returns the title of the book."""
        return self.title

    def get_author(self):
        """Returns the author of the book."""
        return self.author

    def get_publisher(self):
        """Returns the publisher of the book."""
        return self.publisher

    def get_price(self):
        """Returns the price of the book."""
        return self.price

    def set_price(self, price):
        """
        Sets the price of the book.

        Args:
            price (float): The new price of the book.
        """
        if not isinstance(price, (int, float)) or price < 0:
            raise ValueError("Price must be a non-negative number.")
        self.price = price

    def __str__(self):
        """
        Returns a string representation of the Book object.
        """
        return f"Title: {self.title}, Author: {self.author}, Publisher: {self.publisher}, Price: ${self.price:.2f}"

    def __repr__(self):
        """
        Official string representation for developers (useful for debugging).
        """
        return f"Book(title='{self.title}', author='{self.author}', publisher='{self.publisher}', price={self.price})"



class EBook(Book):
    """
    Represents an electronic book, inheriting from the Book class.
    Adds format and download_url attributes.
    """
    def __init__(self, title, author, publisher, price, format, download_url):
        """
        Constructor to initialize an EBook object.

        Args:
            title (str): The title of the ebook.
            author (str): The author of the ebook.
            publisher (str): The publisher of the ebook.
            price (float): The price of the ebook.
            format (str): The format of the ebook (e.g., PDF, EPUB).
            download_url (str): The URL to download the ebook.
        """
        # Call the parent class's constructor to initialize common attributes
        super().__init__(title, author, publisher, price)

        # Input validation for EBook specific attributes
        if not isinstance(format, str) or not format:
            raise ValueError("Format must be a non-empty string.")
        if not isinstance(download_url, str) or not download_url:
            raise ValueError("Download URL must be a non-empty string.")

        self.format = format
        self.download_url = download_url

    def get_format(self):
        """Returns the format of the ebook."""
        return self.format

    def get_download_url(self):
        """Returns the download URL of the ebook."""
        return self.download_url

    def set_download_url(self, download_url):
        """Sets the download URL of the ebook."""
        if not isinstance(download_url, str) or not download_url:
            raise ValueError("Download URL must be a non-empty string.")
        self.download_url = download_url

    def __str__(self):
        """
        Returns a string representation of the EBook object, including format and URL.
        """
        return f"{super().__str__()}, Format: {self.format}, Download URL: {self.download_url}"

    def __repr__(self):
        """
        Official string representation for developers.
        """
        return f"EBook(title='{self.title}', author='{self.author}', publisher='{self.publisher}', price={self.price}, format='{self.format}', download_url='{self.download_url}')"



def main():
    """
    Main function to demonstrate the usage of the Book and EBook classes.
    """
    try:
        # Create a Book object
        book1 = Book("The Lord of the Rings", "J.R.R. Tolkien", "Allen & Unwin", 25.00)
        print("Book Details:")
        print(book1)  # Uses the __str__ method
        print(repr(book1)) # Uses the __repr__ method

        # Create an EBook object
        ebook1 = EBook("Python Crash Course", "Eric Matthes", "No Starch Press", 31.99, "PDF", "https://nostarch.com/pythoncrashcourse2e")
        print("\nEBook Details:")
        print(ebook1)  # Uses the __str__ method of EBook
        print(repr(ebook1))

        #Demonstrate Polymorphism.  Both objects can be treated as Books.
        print("\nDemonstrating Polymorphism:")
        books = [book1, ebook1]  # List of Book and EBook objects
        for book in books:
            print(f"Title: {book.get_title()}, Author: {book.get_author()}, Price: {book.get_price():.2f}")

        # Demonstrate Encapsulation and Inheritance
        print("\nDemonstrating Encapsulation and Inheritance:")
        print(f"Original EBook Price: ${ebook1.get_price():.2f}")
        ebook1.set_price(29.99) #Encapsulation: Price is set using a method.
        print(f"Modified EBook Price: ${ebook1.get_price():.2f}")
        print(f"EBook Format: {ebook1.get_format()}") #Inheritance: EBook inherits get_format() from Book.

    except ValueError as e:
        print(f"Error: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    main()